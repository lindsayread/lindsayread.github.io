---
layout: post
title: Hotel Recommender for Puerto Vallarta, Mexico
---

I have always loved traveling and learning about new cultures, so for my final project at Metis, I decided to create a recommendation system for hotels in Puerto Vallarta, Mexico. One of the most frustrating things about traveling is trying to find the perfect place to stay. You can go online and find an abundance of options in hotels, they are often sorted by highest rating and/or price, but what might be considered as a really good hotel for some people will not be as good of a hotel for other people. What would be ideal is if you could input the exact specifications that **you** want out of your hotel experience. It would also be nice if you could get results for hotels that are close to places that you care about (ie. within walking distance of lots of high quality restaurants or close to lots of high quality art galleries, etc.). 

I used the Google Places API to get information on over 600 hotels and places of lodging in Puerto Vallarta, including the 5 most recent reviews for each hotel, the hotel's overall rating, and the latitude and longitude of the hotel. I then used the latitude and longitude to get more information on the area around the hotel (ie. restaurants, tourist attractions, gyms, casinos, etc.). For each of those types of places around the hotel, I programatically engineered features like the number of restaurants within walking distance (800 m) of the hotel, the mean rating of all restaurants within walking distance, and the top three rated restaurants within walking distance of each hotel.

Once I had the five most recent reviews for each hotel, I cleaned the text by first using the Google Translate API to translate reviews to English, regardless of the original language. Then, I removed "/n" characters, emojis, excessive spaces, etc. and made all words lower case. At this point, the reviews were ready to move into the modeling phase. 

Since hotel reviews are highly dependent on context and semantics, and my ultimate goal was to use a user's text as an input, I knew that word embedding techniques would probably work better than bag of words techniques. If I had used bag of word techniques, when trying to process a user's text, a model would only detect words that were exactly the same as words that were used in hotel's actual reviews; it wouldn't take into consideration that a user was describing a hotel very similar to a hotel in the dataset. The process of getting each hotel's 5 reviews compiled into one, 300 dimensional vector was a little tricky; first, I had to get the 300 dimensional vector for each word using the Google News model with the Gensim library. Once each word had a vector, I had to get the mean of each word for each dimension, which translated to the final 300 dimensional vector for the entire hotel.

When a user inputs their own text to the app, my model will use the same preprocessing techniques of cleaning the text, and fitting a mean 300 dimensional vector for the entire "user's hotel." I then looked at the cosine similarity matrix of that "user's hotel" to see which hotels in the dataframe were most similar. 

When a user selects the places nearby that are important to them, my model will apply a weight to those features so that it will favor hotels matching those criteria (ie. if a user selects "Restaurants Nearby" and "Tourist Attractions Nearby," my model will apply weight towards number of restaurants nearby, mean rating of restaurants nearby, number of tourist attractions nearby, and mean rating of tourist attractions nearby). 

I then looked combined the cosine similarity matrix gathered by this information, with the cosine similarity matrix of the NLP portion to get an overall cosine similarity matrix of both the text they provided along with the features they selected. I weighed the NLP portion 3 times as much as the "other features" portion as I did not want the features to outweigh the unique specifications of the user. I took the cosine similarity of the "other features" (corresponding to what the user selected), added that to the cosine similarity of 3* the NLP cosine similarity matrix, and divided it by 4 to get the mean similarity of the user to each hotel. Based on that, I returned to the user their most similar hotel(s) (up to 10).

In the output, you are able to see a map of your recommended hotels, and below that, you'll see information about each of the hotels recommended to you: the hotel name, rating, website, phone number, and other information depending on which places you selected on the left.

After creating the app, I decided to test out the app. I found the results to be pretty spot on with anything I put in the input. For example, I typed in "I would like a unique Mexican boutique style hotel with views of the ocean." I also selected "Restaurants Nearby" and "Art Galleries Nearby." What was returned to me was a list of 3 recommended hotels, one of them being Casa Paraiso. I clicked on the link for the hotel and found the hotel was described as a Mexcian hacienda style hotel with downtown and ocean views, which is pretty spot on with what I wanted. The hotel was also within walking distance of over 60 restaurants and 40 art galleries.

Overall, I thoroughly enjoyed this project and am thrilled with the results that my app is able to provide! 
